pipeline 
{
  environment 
  {
    DOCKERHUB_CREDENTIALS=credentials('docker-hub')
  }
  agent 
  {
    label 'docker-node'
  }
  stages 
  {
    stage('Clone Repo')
    {
      steps
      {
        git branch: 'master', url: 'http://192.168.56.12:3000/douser/devops-bgapp.git'
      }
    }
    stage('Prepare volumes')
    {
      steps
      {
        sh 'sudo rm -r /home/vagrant/web || true'
        sh 'sudo cp -r web /home/vagrant/web'
      }
    }
    stage('Deploy on Staging')
    {
      steps
      {
        sh 'docker-compose -f docker-compose-dev.yaml down || true'
        sh 'docker-compose -f docker-compose-dev.yaml up -d'
      }
    }
    stage('Test')
    {
      steps
      {
        script 
        {
          echo 'Test #1 - reachability'
          sh 'echo $(curl --write-out "%{http_code}" --silent --output /dev/null http://localhost:8080) | grep 200'
          
          echo 'Test if DB works - check Plovdiv is displayed'
        //   sh 'echo $(curl -silent http://localhost:8080) | grep -oh "\\w*Пловдив\\w*"'
        }
      }
    }
    stage('Stop app and remove from Staging')
    {
      steps
      {
        sh 'docker-compose -f docker-compose-dev.yaml down || true'
        // sh 'docker container stop $(docker ps -a -q --filter "ancestor=ivelin1936/m5_web") || true'
        // sh 'docker rm $(docker ps -a -q --filter "ancestor=ivelin1936/m5_web") || true'
        // sh 'docker container stop $(docker ps -a -q --filter "ancestor=ivelin1936/m5_db") || true'
        // sh 'docker rm $(docker ps -a -q --filter "ancestor=ivelin1936/m5_db")) || true'
      }
    }
    stage('Publishing the images to Docker Hub') 
    {
      steps 
      {
        sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
        sh 'docker image tag $(basename $(pwd))_web ivelin1936/m5_web'
        sh 'docker push ivelin1936/m5_web'
        sh 'docker image tag $(basename $(pwd))_db ivelin1936/m5_db'
        sh 'docker push ivelin1936/m5_db'
      }
    }
    stage('Remove images from Staging')
    {
      steps
      {
        sh 'docker-compose -f docker-compose-dev.yaml down --rmi all || true'
      }
    }
    stage('Deploy App on Prod')
    {
      steps
      {
        sh 'docker image rm $DOCKERHUB_CREDENTIALS_USR/m5_web || true'
        sh 'docker image rm $DOCKERHUB_CREDENTIALS_USR/m5_db || true'
          
        sh 'docker-compose -f docker-compose-prod.yaml down || true'
        sh 'docker-compose -f docker-compose-prod.yaml up -d'
      }
    }
  }
  post 
  { 
    always 
    { 
      cleanWs()
    }
  }
} 
